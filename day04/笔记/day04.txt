1.请求对象 - request
  from flask import request
  属性
    1.request.method
    2.request.args
    3.request.form
    4.request.cookies
    5.request.headers
      request.headers.get('referer')
  1.获取 get 请求数据
    使用超链接发送 get 请求，拼地址栏参数
    <a href="/request?name=xxx&age=xxx">xxx</a>
    使用 js 中的 location 对象，发送 get 请求并拼接参数
    <script>
        $btn.click(function(){
            location.href='xxxx?arg1=value1&arg2=value2'
        });
    </script>
  2.获取 post 请求数据
    request.form.get('xxx')
    request.form.getlist('name_list')
2.响应对象
  除了可以响应字符串和模板之外，还可以是响应对象或重定向
  1.响应对象 - make_response()
    from flask import make_response
    resp = make_response('xxxx')
    return resp

    resp = make_response(render_template('xx.html',params=local()))
    return resp
  2.重定向
    由服务器通知浏览器向新的地址发送一个请求
    from flask import redirect
    resp = redirect('重定向地址')
    return resp
3.文件上传
  1.前端页面
    1.form 中的 method 的值必须为 post
    2.form 中的 enctype 的值必须为 multipart/form-data
    大量数据上传的时候(如：超大文件)，就不能使用网页上传了(主要是由于http协议不支持)，
    需要使用单独的上传工具(c/s版的)
  2.服务器端
    使用 request.files 接收上传的文件
    f = request.files['文件选择框名称']
    f.save('static/' + f.filename)
==================================================================================
1.模型 - Models
  1.什么是模型
    模型，是根据数据库中表的结构来创建出来的 class 。每一张表到编程语言中就是一个 class ，
    表中的每一个列，到编程语言中就是 class 中的一个属性。
  2.创建 和 使用模型 - ORM
    1.什么是 ORM
      ORM：Object Relational Mapping
        简称：ORM, O/RM , O/R Mappping
        中文：对象关系映射
    2.ORM 的三大特征
      1.数据表(table)到编程类(class)的映射
        数据库中的每一张表 对应 到编程语言中，都有一个类
        在 ORM 中
          允许将数据表 自动 生成一个类
          也允许将类 自动 生成一张表
      2.数据类型的映射
        将数据库表中的字段以及数据类型 对应到 编程语言中类的属性
        在 ORM 中
          允许将表中的字段和数据类型 自动 映射到编程语言中
          也允许将类中的属性和类型 自动 映射到数据库表中
      3.关系映射
        将数据库中表之间的关系 对应到 到编程语言中类之间的关系
        数据库表之间的关系
          一对一，一对多，多对多
            一对一：主外键关联，外键需要加唯一约束
            一对多：主外键关联
            多对多：
    3.ORM 的优点
      1.提高了开发的效率
      2.可用省略庞大的数据访问层，即便不用 SQL 编码也能完成对数据的 CRUD 操作
  3.定义模型
    1.数据库 和 框架的配置
      1.安装 SQLAlchemy
        pip3 install sqlslchemy
        pip3 install flask-sqlalchemy
      2.创建数据库
        create database dbname default charset utf8 collate utf8_general_ci;
      3.配置数据库
        from flask import Flask
        # 将 SQLAlchemy 导入进来
        from flask_sqlalchemy import SQLAlchemy

        app = Flask(__name__)

        # app.config['SQLALCHEMY_DATABASE_URI']='mysql://username:pwd@host:port/dbname'
        app.config['SQLALCHEMY_DATABASE_URI']='mysql://root:horsin@123@localhost:3306/flask'

        # 创建 SQLAlchemy 的实例
        db = SQLAlchemy(app)

        # db 是 SQLAlchemy 的实例,表示程序正在使用的数据库,同时也获得了 SQLAlchemy 中的所有功能

        if __name__ == "__main__":
            app.run(debug=True)
    2.定义模型
      模型:
        数据库中的表在编程语言中的体现,其本质就是一个 Python 的类(可称为:模型类 或 实体类).类中的属
        性要与数据库表中的列相对应
      语法:
        class MODENAME(db.Model):
            __tablename__ = "TABLENAME"
            COLUMN_NAME = db.Column(db.TYPE,OPTIONS)

            1.MODENAME:定义模型名称,根据表名设定
            2.TABLENAME:映射到数据库中表的名字
            3.COLUMN_NAME:属性名,映射到表中列的名字
            4.db.TYPE:映射到列的数据类型
            5.OPTIONS:列选项
      db.TYPE  列类型如下:
        类型名         python类型          说明
        Integer        int            普通整数,32位
        SmallInteger   int          小范围整数,通常16位
        BigInteger     int或long      不限精度的整数
        Float          float             浮点数
        Numeric        decimal.Decimal   定点数
        String         str              变长字符串
        Text           str            变长字符串,优化
        Unicode        unicode       变长Unicode字符串
        UnicodeText    unicode      优化后的变长Unicode
        Boolean        bool              布尔值
        Date           datetime.date      日期
        Time           datetime.time      时间
        DateTime       datetime.datetime  日期和时间
      OPTIONS 列选项
        选项名                             说明
        primary_key              设置为True则表示该列为主键
        unique                   设置为True则表示该列的值唯一
        index                    设置为True则表示该列要创建索引
        nullable                 设置为True则表示该列允许为空
        default                  为该列定义默认值
    练习
      1.创建 Student 模型类
        表名: student
        字段:
          1.id,主键,自增
          2.sname,长度为30的字符串,不允许为空
          3.sage,整数
      2.创建 Teacher 模型类
        表名:teacher
        字段:
          1.id,主键,自增
          2.tname,长度为30的字符串
          3.tage,整数
      3.创建 Course 模型类
        表名:course
        字段:
          1.id,主键,自增
          2.cname,长度为30的字符串
  4.数据库操作
    1.插入
      db.session.add(Models)
      db.session.commit()















